// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
const express = require('express');
const ZKTeco = require('node-zklib');

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();
const port = 3000;

// Middleware ƒë·ªÉ x·ª≠ l√Ω CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// Middleware ƒë·ªÉ parse JSON
app.use(express.json());

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        message: 'ZKTeco Backend Server is running',
        timestamp: new Date().toISOString(),
        server: 'zktceo-backend',
        port: port
    });
});

// C·∫•u h√¨nh th√¥ng tin m√°y ch·∫•m c√¥ng
const deviceIP = '192.168.1.240'; // IP c·ªßa m√°y ch·∫•m c√¥ng
const devicePort = 8818;          // Port ƒë√£ x√°c ƒë·ªãnh t·ª´ ph·∫ßn m·ªÅm Wise Eye
const timeout = 10000;            // TƒÉng th·ªùi gian ch·ªù l√™n 10 gi√¢y cho ·ªïn ƒë·ªãnh

// =======================================================================
// API 1: L·∫§Y T·∫§T C·∫¢ D·ªÆ LI·ªÜU CH·∫§M C√îNG (Gi·ªëng phi√™n b·∫£n tr∆∞·ªõc)
// =======================================================================
app.get('/api/attendance', async (req, res) => {
    console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu l·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu ch·∫•m c√¥ng...');
    const zk = new ZKTeco(deviceIP, devicePort, timeout);
    try {
        await zk.createSocket();
        const logs = await zk.getAttendances();
        
        // üîç DEBUG: Ph√¢n t√≠ch d·ªØ li·ªáu tr·∫£ v·ªÅ
        console.log(`üìä DEBUG: T·ªïng s·ªë records: ${logs.data.length}`);
        
        if (logs.data.length > 0) {
            // T√¨m record c≈© nh·∫•t v√† m·ªõi nh·∫•t
            const times = logs.data.map(record => new Date(record.recordTime).getTime());
            const oldestTime = new Date(Math.min(...times));
            const newestTime = new Date(Math.max(...times));
            
            console.log(`üìÖ Oldest record: ${oldestTime.toISOString()} (VN: ${new Date(oldestTime.getTime() + 7*60*60*1000).toISOString()})`);
            console.log(`üìÖ Newest record: ${newestTime.toISOString()} (VN: ${new Date(newestTime.getTime() + 7*60*60*1000).toISOString()})`);
            
            // Ph√¢n t√≠ch theo gi·ªù
            const hourStats = {};
            logs.data.forEach(record => {
                const vnTime = new Date(new Date(record.recordTime).getTime() + 7*60*60*1000);
                const hour = vnTime.getHours();
                hourStats[hour] = (hourStats[hour] || 0) + 1;
            });
            
            console.log('‚è∞ Records per hour (VN time):');
            for (let h = 0; h < 24; h++) {
                if (hourStats[h]) {
                    console.log(`   ${h.toString().padStart(2, '0')}:xx - ${hourStats[h]} records`);
                }
            }
        }
        
        res.status(200).json({
            success: true,
            message: `L·∫•y th√†nh c√¥ng ${logs.data.length} b·∫£n ghi ch·∫•m c√¥ng.`,
            data: logs.data,
            debug: {
                totalRecords: logs.data.length,
                oldestRecord: logs.data.length > 0 ? Math.min(...logs.data.map(r => new Date(r.recordTime).getTime())) : null,
                newestRecord: logs.data.length > 0 ? Math.max(...logs.data.map(r => new Date(r.recordTime).getTime())) : null
            }
        });
    } catch (error) {
        console.error('‚ùå Error details:', error);
        res.status(500).json({ success: false, message: 'L·ªói x·ª≠ l√Ω.', error: error.message });
    } finally {
        await zk.disconnect();
    }
});

// =======================================================================
// API 2: L·∫§Y D·ªÆ LI·ªÜU CH·∫§M C√îNG THEO NG√ÄY (Ch·ª©c nƒÉng m·ªõi)
// =======================================================================
app.get('/api/attendance/by-date', async (req, res) => {
    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ query parameters c·ªßa URL
    const { start, end } = req.query;

    // --- 1. Ki·ªÉm tra ƒë·∫ßu v√†o ---
    if (!start || !end) {
        return res.status(400).json({ success: false, message: 'Vui l√≤ng cung c·∫•p ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu (start) v√† ng√†y k·∫øt th√∫c (end) theo ƒë·ªãnh d·∫°ng YYYY-MM-DD.' });
    }

    console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ ng√†y ${start} ƒë·∫øn ${end}`);

    // --- 2. T·∫°o ƒë·ªëi t∆∞·ª£ng Date ƒë·ªÉ so s√°nh (VN timezone) ---
    // Convert input dates to VN timezone for proper comparison
    const startDate = new Date(start + 'T00:00:00.000+07:00'); // Start of day in VN
    const endDate = new Date(end + 'T23:59:59.999+07:00');     // End of day in VN
    
    console.log(`üìÖ Filter range VN: ${startDate.toISOString()} to ${endDate.toISOString()}`);
    
    // Convert to UTC for comparison with machine data
    const startUTC = new Date(startDate.getTime() - 7*60*60*1000); // VN ‚Üí UTC
    const endUTC = new Date(endDate.getTime() - 7*60*60*1000);     // VN ‚Üí UTC
    
    console.log(`üìÖ Filter range UTC: ${startUTC.toISOString()} to ${endUTC.toISOString()}`);

    const zk = new ZKTeco(deviceIP, devicePort, timeout);
    try {
        // --- 3. K·∫øt n·ªëi v√† l·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu ---
        await zk.createSocket();
        console.log('ƒêang l·∫•y to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ l·ªçc...');
        const logs = await zk.getAttendances();
        console.log(`ƒê√£ l·∫•y v·ªÅ ${logs.data.length} b·∫£n ghi.`);

        // --- 4. L·ªçc d·ªØ li·ªáu tr√™n server v·ªõi UTC comparison ---
        console.log(`üîç DEBUG: Filtering ${logs.data.length} records...`);
        
        const filteredLogs = logs.data.filter(log => {
            const recordDate = new Date(log.recordTime); // This is in UTC from machine
            const match = recordDate >= startUTC && recordDate <= endUTC;
            
            // Debug first few records
            if (logs.data.indexOf(log) < 5) {
                console.log(`   Record ${logs.data.indexOf(log)}: ${recordDate.toString()} (UTC: ${recordDate.toISOString()}) ‚Üí ${match ? 'MATCH' : 'SKIP'}`);
            }
            
            return match;
        });

        console.log(`‚úÖ L·ªçc th√†nh c√¥ng! T√¨m th·∫•y ${filteredLogs.length} b·∫£n ghi ph√π h·ª£p.`);
        
        // Debug: Show time distribution of filtered results
        if (filteredLogs.length > 0) {
            const hourStats = {};
            filteredLogs.forEach(record => {
                const vnTime = new Date(new Date(record.recordTime).getTime() + 7*60*60*1000);
                const hour = vnTime.getHours();
                hourStats[hour] = (hourStats[hour] || 0) + 1;
            });
            
            console.log('‚è∞ Filtered records per hour (VN time):');
            Object.keys(hourStats).sort((a,b) => a-b).forEach(hour => {
                console.log(`   ${hour.padStart(2, '0')}:xx - ${hourStats[hour]} records`);
            });
        }

        // --- 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√£ l·ªçc ---
        res.status(200).json({
            success: true,
            message: `T√¨m th·∫•y ${filteredLogs.length} b·∫£n ghi ch·∫•m c√¥ng t·ª´ ng√†y ${start} ƒë·∫øn ${end}.`,
            data: filteredLogs
        });

    } catch (error) {
        res.status(500).json({ success: false, message: 'L·ªói x·ª≠ l√Ω.', error: error.message });
    } finally {
        await zk.disconnect();
    }
});

// =======================================================================
// API 3: L·∫§Y TO√ÄN B·ªò TH√îNG TIN NH√ÇN VI√äN (Ch·ª©c nƒÉng m·ªõi)
// =======================================================================
/**
 * API Endpoint: GET /api/users
 * M·ª•c ƒë√≠ch: K·∫øt n·ªëi v√† l·∫•y to√†n b·ªô danh s√°ch ng∆∞·ªùi d√πng (nh√¢n vi√™n) tr√™n m√°y ch·∫•m c√¥ng.
 */
app.get('/api/users', async (req, res) => {
    console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu l·∫•y danh s√°ch nh√¢n vi√™n...');
    
    const zk = new ZKTeco(deviceIP, devicePort, timeout);

    try {
        // 1. K·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã
        await zk.createSocket();
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');

        // 2. L·∫•y danh s√°ch ng∆∞·ªùi d√πng
        // Th∆∞ vi·ªán n√†y t·ª± ƒë·ªông h√≥a quy tr√¨nh: ReadAllUserID -> l·∫∑p qua SSR_GetAllUserInfo
        console.log('ƒêang l·∫•y danh s√°ch nh√¢n vi√™n...');
        const users = await zk.getUsers();
        console.log(`‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng! T·ªïng s·ªë nh√¢n vi√™n: ${users.data.length}`);

        // 3. Tr·∫£ v·ªÅ d·ªØ li·ªáu
        // L∆∞u √Ω: D·ªØ li·ªáu n√†y kh√¥ng ch·ª©a th√¥ng tin "ph√≤ng ban" v√¨ n√≥ kh√¥ng t·ªìn t·∫°i tr√™n thi·∫øt b·ªã.
        res.status(200).json({
            success: true,
            message: `L·∫•y th√†nh c√¥ng ${users.data.length} nh√¢n vi√™n.`,
            data: users.data
        });

    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói:', error);
        res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω.',
            error: error.message
        });
    } finally {
        // 4. Ng·∫Øt k·∫øt n·ªëi
        await zk.disconnect();
        console.log('‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi.');
    }
});

// =======================================================================
// API 4: KI·ªÇM TRA TH√îNG TIN THI·∫æT B·ªä V√Ä TH·ªúI GIAN (Debug)
// =======================================================================
app.get('/api/device/info', async (req, res) => {
    console.log('üîç Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra th√¥ng tin thi·∫øt b·ªã...');
    
    const zk = new ZKTeco(deviceIP, devicePort, timeout);

    try {
        await zk.createSocket();
        console.log('‚úÖ K·∫øt n·ªëi thi·∫øt b·ªã th√†nh c√¥ng!');

        // L·∫•y th√¥ng tin c∆° b·∫£n
        const info = {
            deviceIP: deviceIP,
            devicePort: devicePort,
            connectionTime: new Date().toISOString(),
            serverTime: new Date().toISOString(),
            serverTimezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        };

        // Th·ª≠ l·∫•y th√™m th√¥ng tin t·ª´ device n·∫øu c√≥
        try {
            // M·ªôt s·ªë device c√≥ th·ªÉ c√≥ method getInfo()
            const deviceInfo = await zk.getInfo();
            info.deviceInfo = deviceInfo;
        } catch (e) {
            console.log('‚ÑπÔ∏è Device kh√¥ng h·ªó tr·ª£ getInfo()');
        }

        // L·∫•y s·ªë l∆∞·ª£ng users v√† attendance records
        try {
            const users = await zk.getUsers();
            info.totalUsers = users.data.length;
        } catch (e) {
            console.log('‚ÑπÔ∏è Kh√¥ng th·ªÉ l·∫•y s·ªë l∆∞·ª£ng users');
        }

        try {
            const attendance = await zk.getAttendances();
            info.totalAttendanceRecords = attendance.data.length;
            
            if (attendance.data.length > 0) {
                const times = attendance.data.map(r => new Date(r.recordTime).getTime());
                info.oldestRecord = new Date(Math.min(...times)).toISOString();
                info.newestRecord = new Date(Math.max(...times)).toISOString();
            }
        } catch (e) {
            console.log('‚ÑπÔ∏è Kh√¥ng th·ªÉ l·∫•y attendance info');
        }

        res.status(200).json({
            success: true,
            message: 'L·∫•y th√¥ng tin thi·∫øt b·ªã th√†nh c√¥ng',
            data: info
        });

    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi thi·∫øt b·ªã:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói k·∫øt n·ªëi thi·∫øt b·ªã',
            error: error.message
        });
    } finally {
        await zk.disconnect();
        console.log('‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã.');
    }
});

// Kh·ªüi ch·∫°y server
app.listen(port, () => {
    console.log(`Backend server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
    console.log(`üöÄ API Endpoints:`);
    console.log(`   ‚Ä¢ http://localhost:${port}/api/attendance - L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu ch·∫•m c√¥ng`);
    console.log(`   ‚Ä¢ http://localhost:${port}/api/attendance/by-date?start=YYYY-MM-DD&end=YYYY-MM-DD - L·∫•y d·ªØ li·ªáu theo ng√†y`);
    console.log(`   ‚Ä¢ http://localhost:${port}/api/users - L·∫•y danh s√°ch nh√¢n vi√™n`);
    console.log(`   ‚Ä¢ http://localhost:${port}/api/device/info - Ki·ªÉm tra th√¥ng tin thi·∫øt b·ªã (DEBUG)`);
    console.log(`   ‚Ä¢ http://localhost:${port}/api/health - Health check`);
    console.log('');
    console.log('üîç DEBUG Mode: Enhanced logging enabled for troubleshooting');
});