"use client"

import type React from "react"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Upload, FileText, Building2 } from "lucide-react"
import type { AttendanceRecord, Employee, Department, CheckInSettings } from "@/app/page"
import type { UserType } from "@/components/login-form"

interface XMLImporterProps {
  onImport: (records: AttendanceRecord[], employees: Employee[]) => void
  user: UserType
  departments: Department[]
  checkInSettings: CheckInSettings // ƒê√£ c√≥ s·∫µn checkInSettings
}

export function XMLImporter({ onImport, user, departments, checkInSettings }: XMLImporterProps) {
  const [isDragging, setIsDragging] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  const [showDepartmentDialog, setShowDepartmentDialog] = useState(false)
  const [selectedDepartment, setSelectedDepartment] = useState("")
  const [pendingFile, setPendingFile] = useState<File | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Helper to convert HH:MM to total minutes from midnight
  const timeToMinutes = (timeStr: string): number => {
    const [hour, minute] = timeStr.split(":").map(Number)
    return hour * 60 + minute
  }

  // C·∫≠p nh·∫≠t h√†m calculatePoints ƒë·ªÉ s·ª≠ d·ª•ng c·∫•u h√¨nh ca l√†m vi·ªác m·ªõi
  const calculatePoints = (
    dateStr: string,
    allCheckInSettings: CheckInSettings, // Truy·ªÅn to√†n b·ªô settings v√†o
    morningCheckIn?: string,
    afternoonCheckIn?: string,
  ): number => {
    let points = 0
    const date = new Date(dateStr)
    const dayOfWeek = date.getDay() // 0 for Sunday, 1 for Monday, ..., 6 for Saturday

    const daySettings = allCheckInSettings[dayOfWeek]

    if (!daySettings || !daySettings.shifts || daySettings.shifts.length === 0) {
      console.warn(`No check-in settings or shifts found for day of week: ${dayOfWeek}. Returning 0 points.`)
      return 0
    }

    let morningPointsAwarded = false
    let afternoonPointsAwarded = false

    // Ki·ªÉm tra gi·ªù ch·∫•m c√¥ng bu·ªïi s√°ng
    if (morningCheckIn && !morningPointsAwarded) {
      const morningCheckInMinutes = timeToMinutes(morningCheckIn)
      for (const shift of daySettings.shifts) {
        const shiftStartMinutes = timeToMinutes(shift.startTime)
        const shiftEndMinutes = timeToMinutes(shift.endTime)

        // Gi·∫£ ƒë·ªãnh: ch·∫•m c√¥ng ph·∫£i n·∫±m trong khung gi·ªù c·ªßa ca ƒë·ªÉ ƒë∆∞·ª£c t√≠nh ƒëi·ªÉm
        if (morningCheckInMinutes >= shiftStartMinutes && morningCheckInMinutes <= shiftEndMinutes) {
          points += shift.points
          morningPointsAwarded = true // ƒê√°nh d·∫•u ƒë√£ c·ªông ƒëi·ªÉm cho bu·ªïi s√°ng
          break // Ch·ªâ c·ªông ƒëi·ªÉm cho m·ªôt ca duy nh·∫•t cho gi·ªù ch·∫•m c√¥ng bu·ªïi s√°ng
        }
      }
    }

    // Ki·ªÉm tra gi·ªù ch·∫•m c√¥ng bu·ªïi chi·ªÅu
    if (afternoonCheckIn && !afternoonPointsAwarded) {
      const afternoonCheckInMinutes = timeToMinutes(afternoonCheckIn)
      for (const shift of daySettings.shifts) {
        const shiftStartMinutes = timeToMinutes(shift.startTime)
        const shiftEndMinutes = timeToMinutes(shift.endTime)

        // Gi·∫£ ƒë·ªãnh: ch·∫•m c√¥ng ph·∫£i n·∫±m trong khung gi·ªù c·ªßa ca ƒë·ªÉ ƒë∆∞·ª£c t√≠nh ƒëi·ªÉm
        if (afternoonCheckInMinutes >= shiftStartMinutes && afternoonCheckInMinutes <= shiftEndMinutes) {
          points += shift.points
          afternoonPointsAwarded = true // ƒê√°nh d·∫•u ƒë√£ c·ªông ƒëi·ªÉm cho bu·ªïi chi·ªÅu
          break // Ch·ªâ c·ªông ƒëi·ªÉm cho m·ªôt ca duy nh·∫•t cho gi·ªù ch·∫•m c√¥ng bu·ªïi chi·ªÅu
        }
      }
    }

    return points
  }

  // T·ª± ƒë·ªông x√°c ƒë·ªãnh t∆∞·ªõc v·ªã d·ª±a tr√™n t√™n
  const getTitleFromName = (name: string): string => {
    if (name.includes("TP") || name.includes("Tr∆∞·ªüng")) {
      return "Tr∆∞·ªüng ph√≤ng"
    }
    return "Nh√¢n vi√™n"
  }

  const parseXMLFile = async (
    file: File,
    targetDepartment: string,
  ): Promise<{ records: AttendanceRecord[]; employees: Employee[] }> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()

      reader.onload = (e) => {
        try {
          const xmlText = e.target?.result as string
          const parser = new DOMParser()
          const xmlDoc = parser.parseFromString(xmlText, "text/xml")

          const rows = xmlDoc.querySelectorAll("Row")
          const records: AttendanceRecord[] = []
          const employees: Employee[] = []
          const employeeRecords = new Map<
            string,
            { date: string; morningCheckIn?: string; afternoonCheckIn?: string }
          >()
          const employeeSet = new Set<string>()

          console.log(`üìä Processing ${rows.length} rows from XML file`)

          // Skip header rows (first 4 rows) v√† parse t·ª´ row th·ª© 5
          for (let i = 4; i < rows.length; i++) {
            const row = rows[i]
            const cells = row.querySelectorAll("Cell")

            if (cells.length >= 6) {
              // C·∫•u tr√∫c: STT, Ng√†y, ID, H·ªç v√† T√™n, Gi·ªù V√†o, Gi·ªù Ra
              const dateCell = cells[1]?.querySelector("Data")?.textContent
              const idCell = cells[2]?.querySelector("Data")?.textContent
              const nameCell = cells[3]?.querySelector("Data")?.textContent
              const timeInCell = cells[4]?.querySelector("Data")?.textContent
              const timeOutCell = cells[5]?.querySelector("Data")?.textContent

              if (dateCell && idCell && nameCell) {
                const date = new Date(dateCell).toISOString().split("T")[0]
                const employeeId = idCell.trim()
                const employeeName = nameCell.trim()
                const key = `${employeeId}-${date}`

                // T·∫°o employee n·∫øu ch∆∞a c√≥ - t·∫•t c·∫£ thu·ªôc ph√≤ng ƒë∆∞·ª£c ch·ªçn
                if (!employeeSet.has(employeeId)) {
                  const title = getTitleFromName(employeeName)

                  employees.push({
                    id: employeeId,
                    name: employeeName,
                    title: title,
                    department: targetDepartment, // S·ª≠ d·ª•ng ph√≤ng ban ƒë∆∞·ª£c ch·ªçn
                  })
                  employeeSet.add(employeeId)
                }

                let morningCheckIn: string | undefined
                let afternoonCheckIn: string | undefined

                // X·ª≠ l√Ω Gi·ªù V√†o
                if (timeInCell && timeInCell.trim()) {
                  const timeStr = new Date(timeInCell).toTimeString().split(" ")[0]
                  const hour = Number.parseInt(timeStr.split(":")[0])

                  if (hour < 12) {
                    morningCheckIn = timeStr
                  } else {
                    afternoonCheckIn = timeStr
                  }
                }

                // X·ª≠ l√Ω Gi·ªù Ra
                if (timeOutCell && timeOutCell.trim()) {
                  const timeStr = new Date(timeOutCell).toTimeString().split(" ")[0]
                  const hour = Number.parseInt(timeStr.split(":")[0])

                  if (hour < 12) {
                    morningCheckIn = timeStr
                  } else {
                    afternoonCheckIn = timeStr
                  }
                }

                // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t record
                const existingRecord = employeeRecords.get(key)
                if (existingRecord) {
                  if (morningCheckIn) existingRecord.morningCheckIn = morningCheckIn
                  if (afternoonCheckIn) existingRecord.afternoonCheckIn = afternoonCheckIn
                } else {
                  employeeRecords.set(key, {
                    date,
                    morningCheckIn,
                    afternoonCheckIn,
                  })
                }
              }
            }
          }

          console.log(`‚úÖ Created ${employeeSet.size} employees and ${employeeRecords.size} attendance records`)

          // Chuy·ªÉn ƒë·ªïi Map th√†nh AttendanceRecord array
          employeeRecords.forEach((record, key) => {
            const employeeId = key.split("-")[0]
            // Truy·ªÅn checkInSettings v√†o h√†m calculatePoints
            const points = calculatePoints(record.date, checkInSettings, record.morningCheckIn, record.afternoonCheckIn)

            records.push({
              employeeId,
              date: record.date,
              morningCheckIn: record.morningCheckIn,
              afternoonCheckIn: record.afternoonCheckIn,
              points,
            })

          })

          resolve({ records, employees })
        } catch (error) {
          console.error("Parse error:", error)
          reject(error)
        }
      }

      reader.onerror = () => reject(new Error("Kh√¥ng th·ªÉ ƒë·ªçc file"))
      reader.readAsText(file)
    })
  }

  const handleFileSelect = async (file: File) => {
    if (!file.name.toLowerCase().endsWith(".xml")) {
      alert("Vui l√≤ng ch·ªçn file XML")
      return
    }

    // N·∫øu l√† admin, c·∫ßn ch·ªçn ph√≤ng ban
    if (user.role === "admin") {
      setPendingFile(file)
      setShowDepartmentDialog(true)
      return
    }

    // N·∫øu l√† tr∆∞·ªüng ph√≤ng ho·∫∑c qu·∫£n l√Ω ph√≤ng ban, t·ª± ƒë·ªông s·ª≠ d·ª•ng ph√≤ng c·ªßa m√¨nh
    if ((user.role === "truongphong" || user.role === "department_manager") && user.department) {
      await processFile(file, user.department)
    }
  }

  const processFile = async (file: File, targetDepartment: string) => {
    setIsProcessing(true)
    console.log(`üîÑ Starting XML import for file: ${file.name}`)

    try {
      console.log(`üìù Parsing XML file and calculating points...`)
      const { records, employees } = await parseXMLFile(file, targetDepartment)
      console.log(`‚úÖ Import completed: ${employees.length} employees, ${records.length} attendance records`)
      onImport(records, employees)
      alert(
        `ƒê√£ import th√†nh c√¥ng v√†o ${targetDepartment}:\n- ${employees.length} nh√¢n vi√™n\n- ${records.length} b·∫£n ghi ch·∫•m c√¥ng`,
      )
    } catch (error) {
      console.error("Error parsing XML:", error)
      alert("C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file XML")
    } finally {
      setIsProcessing(false)
      setShowDepartmentDialog(false)
      setPendingFile(null)
      setSelectedDepartment("")
    }
  }

  const handleDepartmentConfirm = () => {
    if (!selectedDepartment || !pendingFile) return
    processFile(pendingFile, selectedDepartment)
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)

    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      handleFileSelect(files[0])
    }
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(true)
  }

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
  }

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      handleFileSelect(files[0])
    }
  }

  // Get available departments based on user role
  const availableDepartments =
    user.role === "admin" ? departments.map((d) => d.name) : user.department ? [user.department] : []

  return (
    <>
      <div className="flex items-center gap-2">
        <div
          className={`
            relative border-2 border-dashed rounded-lg p-4 transition-colors
            ${isDragging ? "border-blue-500 bg-blue-50" : "border-gray-300"}
            ${isProcessing ? "opacity-50 pointer-events-none" : "hover:border-gray-400"}
          `}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
        >
          <input
            ref={fileInputRef}
            type="file"
            accept=".xml"
            onChange={handleFileInputChange}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            disabled={isProcessing}
          />

          <div className="flex items-center gap-2 text-sm text-gray-600">
            <FileText className="w-4 h-4" />
            <span>{isProcessing ? "ƒêang x·ª≠ l√Ω..." : "K√©o th·∫£ file XML ho·∫∑c click ƒë·ªÉ ch·ªçn"}</span>
          </div>
        </div>

        <Button
          variant="outline"
          size="sm"
          onClick={() => fileInputRef.current?.click()}
          disabled={isProcessing}
          className="flex items-center gap-2"
        >
          <Upload className="w-4 h-4" />
          Import XML
        </Button>
      </div>

      {/* Department Selection Dialog */}
      {showDepartmentDialog && (
        <Dialog open={true} onOpenChange={() => setShowDepartmentDialog(false)}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Building2 className="w-5 h-5" />
                Ch·ªçn ph√≤ng ban cho file import
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  File XML n√†y thu·ªôc ph√≤ng ban n√†o?
                </label>
                <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>
                  <SelectTrigger>
                    <SelectValue placeholder="Ch·ªçn ph√≤ng ban" />
                  </SelectTrigger>
                  <SelectContent>
                    {availableDepartments.map((dept) => (
                      <SelectItem key={dept} value={dept}>
                        {dept}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="bg-blue-50 p-3 rounded-lg">
                <p className="text-sm text-blue-700">
                  <strong>L∆∞u √Ω:</strong> T·∫•t c·∫£ nh√¢n vi√™n trong file XML n√†y s·∫Ω ƒë∆∞·ª£c g√°n v√†o ph√≤ng ban ƒë∆∞·ª£c ch·ªçn.
                </p>
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={() => setShowDepartmentDialog(false)}>
                  H·ªßy
                </Button>
                <Button onClick={handleDepartmentConfirm} disabled={!selectedDepartment}>
                  X√°c nh·∫≠n Import
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </>
  )
}
